
substitutions:
  water_temp:
    min_temp: "30" 
    max_temp: "70"
  rate:
    up_step_c:   "1.25"   # 5 °C/min * 15 s / 60
    down_step_c: "2.50"   # 10 °C/min * 15 s / 60
  opentherm_update_interval: 15s
  output_entity_name: T_set
  boiler_enable: boiler_enable
  outside_temp_sensor: sensor.outside_temp
  heat_demand:
    room_1: esphome_entity
    room_2: esphome_entity
  pid_output:
    room_1: room_a_pid_output
    room_2: room_b_pid_output

# --- Outside temperature from HA
sensor:
  - platform: homeassistant
    id: outside_temperature_sensor
    entity_id: ${outside_temp_sensor}
    internal: false

  # Max room demand (0..1)
  - platform: template
    id: max_room_demand
    name: "Max Room Demand"
    icon: mdi:gauge
    unit_of_measurement: "%"
    update_interval: ${opentherm_update_interval}
    filters:
      - round: 0
    lambda: |-
      float a = id(${heat_demand.room_1}).state;
      float b = id(${heat_demand.room_2}).state;
      if (isnan(a)) a = 0.0f;
      if (isnan(b)) b = 0.0f;
      return a > b ? a : b;



  # Final target exposed for writer
  - platform: template
    id: target_water_temperature
    name: "Target Water Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: mdi:coolant-temperature
    update_interval: ${opentherm_update_interval}
    filters:
      - round: 0
    lambda: |-
      const float Tmin = ${water_temp.min_temp};
      const float Tmax = ${water_temp.max_temp};
      const float k    = 1.0f;   // °C flow per °C below Tref
      const float Tref = 10.0f;  // reference outdoor °C

      float D = id(max_room_demand).state / 100.0f; // [%] → [0..1]
      if (isnan(D)) D = 0.0f;

      // No demand, return minimum
      if (D < 0.1f) return 0.0f; 

      float Tout = id(outside_temperature_sensor).state;
      if (isnan(Tout)) Tout = Tref;

      float Tdem = Tmin + D * (Tmax - Tmin);
      float B    = k * (Tref - Tout);
      float Tf   = Tdem + B;

      if (Tf < Tmin) Tf = Tmin;
      if (Tf > Tmax) Tf = Tmax;
      return Tf;

binary_sensor:
# --- Any valve open?
  - platform: template
    id: any_valve_open
    lambda: |-
      return (id(${pid_output.room_1}).state > 5.0f) ||
             (id(${pid_output.room_2}).state > 5.0f);

# --- CH enable logic
  - platform: template
    id: ch_should_enable
    lambda: |-
      if(id(max_room_demand).state >= 0.10f && id(any_valve_open).state)
      {
        id(${boiler_enable}).turn_on();
        return true;
      } else {
        id(${boiler_enable}).turn_off();
        return false;
      }
      return false;

# --- Writer
interval:
  - interval: ${opentherm_update_interval}
    then:
      - lambda: |-
          float target = id(target_water_temperature).state;
          bool enable  = id(ch_should_enable).state;

          if (!isnan(target)) {
            if (enable) {
              id(${output_entity_name}).set_level(target);
            } else {
              id(${output_entity_name}).set_level(0.0f);
            }
          }
