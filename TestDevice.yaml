substitutions:
  name: testdevice
  friendly_name: TestDevice
  climate_pid_name: pid_climate
  climate_pid_friendly_name: "Pid Climate"
  climate_main: climate.verwarming_stijn
  climate_trv: climate.fake_radiatorknop_stijn #climate.trvzb_kamer_stijn
  temperature_sensor: sensor.snzb02p_kamer_stijn_temperature
  humidity_sensor: sensor.snzb02p_kamer_stijn_humidity
  outdoor_sensor: sensor.temperature
  window_sensor: binary_sensor.snzb04p_kamer_stijn_contact
  interval_time: 1s
  diagnostic_interval_time: 10s

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}

logger:
  level: WARN

esp32:
  board: esp32-poe-iso
  framework:
    type: arduino


# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome-testdevice_Key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password



packages:
  target_state_sync:
    file: ClimateTargetStateSync.yaml
    vars:
      __esphome_pid_climate__: ${climate_pid_name}
      __ha_generic_thermostat__: ${climate_main}
      __ha_sonoff_trv_1__: ${climate_trv}
      __internal__: "false"

  pid_debug_sensors:
    file: ClimatePidDebugSensors.yaml
    vars:
      __internal__: "false"
      __device_name__: ${name}
      __friendly_name__: ${climate_pid_friendly_name}
      __esphome_pid_climate__: ${climate_pid_name}
      __diagnostic_interval__: ${diagnostic_interval_time}
    # ref: main  # optional
    # refresh: 0s  # optional

button:
  - platform: restart
    name: "Restart"
    id: button_restart
    entity_category: config
  
  - platform: template
    id: reset_integral
    on_press:
      - climate.pid.reset_integral_term: ${climate_pid_name}
    internal: True

    
  - platform: template
    id: PID_autotune_start
    name: "PID autotune"
    entity_category: config
    on_press:
      then:
       - script.execute: run_pid_autotune

script:
  - id: run_pid_autotune
    then:
      - climate.pid.autotune:
          id: ${climate_pid_name}
          noiseband: 0.25
          positive_output: 1.0
          negative_output: 0.0
      

globals:
  - id: previous_setpoint
    type: float
    initial_value: "22.0"
  - id: heat_output
    type: float
    restore_value: no
    initial_value: "0.0"

switch:
  - platform: template
    id: generic_thermostat_actuater_heat
    name: "Generic Thermostat Actuater Heat"
    entity_category: config
    turn_on_action:
      - switch.template.publish:
          id: generic_thermostat_actuater_heat
          state: ON
    turn_off_action:
      - switch.template.publish:
          id: generic_thermostat_actuater_heat
          state: OFF

  - platform: template
    id: delete_this_switch
    name: "Delete this switch"
    entity_category: config
    turn_on_action:
      - switch.template.publish:
          id: delete_this_switch
          state: ON
    turn_off_action:
      - switch.template.publish:
          id: delete_this_switch
          state: OFF         
  
    

output:
  - platform: template
    id: heater_output
    type: float
    write_action:
      lambda: |-
        // Window control
        if(isnan(id(window).state))    { id(heat_output) = state; return; } // Turn on heating control when window state is unavailable
        if(id(window).state == 1.0)    { id(heat_output) = 0.0;   return; } // Turn off heating control when window is open       
        if(id(window).state == 0.0)    { id(heat_output) = state; return; }  // Turn on heating control when window is closed
        
        

interval:
  - interval: ${interval_time}
    then:
      lambda: |-
        auto climate = id(${climate_pid_name});  // Access the climate object
        float current_setpoint = climate->target_temperature;
        if (current_setpoint != id(previous_setpoint)) {
          id(previous_setpoint) = current_setpoint;
          id(reset_integral).press();
        }



climate:
  - platform: pid
    id: ${climate_pid_name}
    name: ${climate_pid_friendly_name}
    sensor: temperature
    humidity_sensor: humidity
    default_target_temperature: 21Â°C
    heat_output: heater_output
    internal: true
    visual:
      min_temperature: 5
      max_temperature: 35
      temperature_step: 
        target_temperature: 0.5
        current_temperature: 0.1
    control_parameters:
      kp: 0.23873
      ki: 0.00018
      kd: 8.85876
      min_integral: -10.0
      max_integral: 10.0
      starting_integral_term: 0.0
      output_averaging_samples: 10
      derivative_averaging_samples: 5
    deadband_parameters:
      threshold_low: -0.5
      threshold_high: 0.5
      kp_multiplier: 0.0
      ki_multiplier: 0.05
      kd_multiplier: 0.1
      deadband_output_averaging_samples: 30



binary_sensor:
  - platform: homeassistant 
    name: "Window Sensor"
    entity_id: ${window_sensor}
    id: window
        
    
  - platform: template
    name: "Window"
    id: window_kamer_template
    entity_category: diagnostic
    device_class: window
    lambda: |-
      return id(window).state;
    on_release: 
      then:
        - button.press: reset_integral

sensor:
  - platform: homeassistant 
    name: "Outside Temperature Sensor"
    entity_id: ${outdoor_sensor}
    id: outside_temperature
    filters: 
      - heartbeat: ${interval_time}
      - timeout:
          timeout: 1min
          value: !lambda return 0;
      - lambda: |-
          //const float filterFactor = 0.1f;
          const float filterFactor = 0.00001f;
          float keepFactor = 1.0f - filterFactor;
          float value = id(outside_temperature).state;

          if (isnan(value)){
            return x;
          }

          if (isnan(x)) {
            return keepFactor * value + 0.0;  // Default fallback value
          } else {
            return keepFactor * value + x * filterFactor;
          }

  - platform: homeassistant 
    name: "Temperature Sensor"
    entity_id: ${temperature_sensor}
    id: temperature
    filters: 
      - heartbeat: ${interval_time}
      - lambda: |-
          const float filterFactor = 0.1f;
          float keepFactor = 1.0f - filterFactor;
          float value = id(temperature).state;

          if (isnan(value)) return x;

          if (isnan(x)) return keepFactor * value + 0.0;  // Default fallback value
          else return keepFactor * value + x * filterFactor;
          
          

  - platform: homeassistant 
    name: "Humidity Sensor"
    entity_id: ${humidity_sensor}
    id: humidity
    filters: 
      - heartbeat: ${interval_time}
      - lambda: |-
          const float filterFactor = 0.1f;
          float keepFactor = 1.0f - filterFactor;
          float value = id(humidity).state;

          if (isnan(value)){
            return x;
          }

          if (isnan(x)) {
            return keepFactor * value + 0.0;  // Default fallback value
          } else {
            return keepFactor * value + x * filterFactor;
          }
          

     
  # - platform: pid
  #   climate_id: pid_climate
  #   id: pid_calculated_error_template
  #   type: ERROR  
  #   internal: True

  # - platform: pid
  #   climate_id: pid_climate
  #   id: pid_calculated_p_error_template
  #   type: PROPORTIONAL  
  #   internal: True

  # - platform: pid
  #   climate_id: pid_climate
  #   id: pid_calculated_i_error_template
  #   type: INTEGRAL  
  #   internal: True

  # - platform: pid
  #   climate_id: pid_climate
  #   id: pid_calculated_d_error_template
  #   type: DERIVATIVE  
  #   internal: True

  # - platform: pid
  #   climate_id: pid_climate
  #   id: pid_output_power_template
  #   type: HEAT  
  #   internal: True
             

  - platform: template
    name: "Heat output"
    id: pid_output
    unit_of_measurement: "%"
    icon: "mdi:gauge"
    state_class: measurement
    filters: 
      - multiply: !lambda return 100.0;
      - clamp: 
          max_value: 100.0
          min_value: 0.0
          ignore_out_of_range: false
      - round: 0
      - lambda: |-
          // Visual heating state in home assistant
          if(x < 0.0f)  id(generic_thermostat_actuater_heat).turn_off();
          if(x == 0.0f) id(generic_thermostat_actuater_heat).turn_off();
          if(x > 0.0f)  id(generic_thermostat_actuater_heat).turn_on();
          return x;
    update_interval: ${interval_time}
    lambda: |- 
      return heat_output->value();

  - platform: template
    name: "Valve Closing Position"
    id: valve_closing_position
    unit_of_measurement: "%"
    icon: "mdi:valve"
    state_class: measurement
    filters: 
      - multiply: !lambda return 100.0;
      - lambda: return 100.0 - x;
      - clamp: 
          max_value: 100.0
          min_value: 0.0
          ignore_out_of_range: false
      - round: 0
    update_interval: ${interval_time}
    lambda: |- 
      return heat_output->value();

  - platform: template
    name: "Valve Opening Position"
    id: valve_opening_position
    unit_of_measurement: "%"
    icon: "mdi:valve-open"
    state_class: measurement
    filters: 
      - multiply: !lambda return 100.0;
      - lambda: return x + 5.0;
      - clamp: 
          max_value: 100.0
          min_value: 0.0
          ignore_out_of_range: false
      - round: 0
    update_interval: ${interval_time}
    lambda: |- 
      return heat_output->value();

  


  # - platform: template
  #   id: pid_calculated_error
  #   name: "PID: Error" 
  #   icon: "mdi:gauge"
  #   unit_of_measurement: "%"
  #   state_class: measurement
  #   filters: 
  #     - clamp: 
  #         max_value: 100
  #         min_value: -100
  #         ignore_out_of_range: false
  #   lambda: |-
  #     return id(pid_calculated_error_template).state; 
  #   update_interval: ${diagnostic_interval_time} 
  #   entity_category: diagnostic


  # - platform: template
  #   id: pid_calculated_p_error
  #   name: "PID: P Error" 
  #   icon: "mdi:gauge"
  #   unit_of_measurement: "%"
  #   state_class: measurement
  #   filters: 
  #     - clamp: 
  #         max_value: 100
  #         min_value: -100
  #         ignore_out_of_range: false
  #   lambda: |-
  #     return id(pid_calculated_p_error_template).state; 
  #   update_interval: ${diagnostic_interval_time}  
  #   entity_category: diagnostic


  # - platform: template
  #   id: pid_calculated_i_error
  #   name: "PID: I Error" 
  #   icon: "mdi:gauge"
  #   unit_of_measurement: "%"
  #   state_class: measurement
  #   filters: 
  #     - clamp: 
  #         max_value: 100
  #         min_value: -100
  #         ignore_out_of_range: false
  #   lambda: |-
  #     return id(pid_calculated_i_error_template).state; 
  #   update_interval: ${diagnostic_interval_time}
  #   entity_category: diagnostic


  # - platform: template
  #   id: pid_calculated_d_error
  #   name: "PID: D Error" 
  #   icon: "mdi:gauge"
  #   unit_of_measurement: "%"
  #   state_class: measurement
  #   filters: 
  #     - clamp: 
  #         max_value: 100
  #         min_value: -100
  #         ignore_out_of_range: false
  #   lambda: |-
  #     return id(pid_calculated_d_error_template).state; 
  #   update_interval: ${diagnostic_interval_time}  
  #   entity_category: diagnostic



  # - platform: template
  #   id: pid_output_power
  #   name: "PID: Heating Power" 
  #   unit_of_measurement: "%"
  #   icon: "mdi:gauge"
  #   state_class: measurement
  #   filters: 
  #     - clamp: 
  #         max_value: 100
  #         min_value: -100
  #         ignore_out_of_range: false
  #   lambda: |-
  #     return id(pid_output_power_template).state; 
  #   update_interval: ${diagnostic_interval_time} 
  #   entity_category: diagnostic


  - platform: template
    name: "Temperature Sensor"
    id: temperature_sensor_output
    unit_of_measurement: "Â°C"
    icon: "mdi:thermometer"
    device_class: temperature
    state_class: measurement
    update_interval: ${interval_time}
    lambda: |- 
      return id(temperature).state;

  - platform: template
    name: "Humidity Sensor"
    id: humidity_sensor_output
    unit_of_measurement: "%"
    icon: "mdi:water-percent"
    device_class: humidity
    state_class: measurement
    update_interval: ${interval_time}
    lambda: |- 
      return id(humidity).state;

  - platform: template
    name: "Outdoor Temperature Sensor"
    id: outside_temperature_sensor_output
    unit_of_measurement: "Â°C"
    icon: "mdi:thermometer"
    device_class: temperature
    state_class: measurement
    update_interval: ${interval_time}
    lambda: |- 
      return id(outside_temperature).state;


