# climate/pid_from_ha.yaml  (lives only in GitHub)
substitutions:
  device_name: "pid-bridge"    # may be overridden per node
  climate_name: "Room PID"
  temp_entity: "sensor.living_room_temperature"
  demand_helper: "input_number.heat_demand"
  target_temp: "21"

esphome:
  name: ${device_name}

# pull the temperature (and anything else) from Home Assistant
sensor:
  - platform: homeassistant            # HA API import:contentReference[oaicite:6]{index=6}
    id: room_temp
    entity_id: ${temp_entity}
    unit_of_measurement: "°C"
    accuracy_decimals: 1

# float output that just bounces the PID result back to HA
output:
  - platform: template                 # template output & write_action:contentReference[oaicite:7]{index=7}
    id: ha_heat_demand
    type: float
    write_action:
      - homeassistant.service:         # still valid alias for “action”:contentReference[oaicite:8]{index=8}
          service: input_number.set_value
          data_template:
            entity_id: ${demand_helper}
            value: "{{ (state * 100.0) | round(1) }}"

# the PID climate itself
climate:
  - platform: pid                      # PID climate platform:contentReference[oaicite:9]{index=9}
    id: pid_ctrl
    name: ${climate_name}
    sensor: room_temp
    default_target_temperature: ${target_temp} °C
    heat_output: ha_heat_demand
    control_parameters:
      kp: 0.40
      ki: 0.01
      kd: 0.02

# expose PID internals for debugging
sensor:
  - platform: pid                      # RESULT / ERROR etc.:contentReference[oaicite:10]{index=10}
    climate_id: pid_ctrl
    type: RESULT
    name: "PID Heat %"
    unit_of_measurement: "%"
    filters: [lambda: return x*100.0;]
  - platform: pid
    climate_id: pid_ctrl
    type: ERROR
    name: "PID Error °C"
