substitutions:
  __esphome_pid_climate__: climate_name
  __ha_generic_thermostat__: climate.name
  __ha_sonoff_trv_1__: climate.name
  __internal__: "true"

# binary_sensor:
#   - platform: status
#     id: ha_link          # true = HA (or MQTT) is talking to us
#     internal: true       # hide from the HA UI; delete if you want to see it


api:
  # HA (or any API client) just connected
  on_client_connected:
    - logger.log: "HA online → restoring targets"
    - script.execute:
        id: set_all_targets
        temp: !lambda 'return id(current_setpoint);'
    - script.execute:
        id: set_all_modes
        mode: !lambda 'return id(current_mode);'

  # HA went away
  on_client_disconnected:
    - logger.log: "HA offline → putting PID in OFF fail-safe"
    - script.execute:
        id: set_all_modes
        mode: "off"
    
globals:
  - id: current_setpoint
    type: float
    restore_value: no
    initial_value: '20.0'

  - id: current_mode
    type: std::string
    restore_value: no
    initial_value: '"heat"'  


    
interval:
  - interval: 1min          # anything from 1–10 min is fine
    then:
      - script.execute:
          id: set_all_targets
          temp: !lambda 'return id(current_setpoint);'
      - script.execute:
          id: set_all_modes
          mode: !lambda 'return id(current_mode);'
          
sensor:
  - platform: homeassistant
    id: generic_thermostat_temperature
    entity_id: ${__ha_generic_thermostat__}
    attribute: temperature
    internal: ${__internal__}
    filters:
    - delta: 0.1
    on_value:
      lambda: |-
        if (std::isnan(x)) return;                    // <-- guard
        if (fabsf(id(current_setpoint) - x) > 0.05f) 
        {
          id(current_setpoint) = x;
          id(set_all_targets).execute(x);
        }

  - platform: homeassistant
    id: trv_1_temperature
    entity_id: ${__ha_sonoff_trv_1__}
    attribute: temperature
    internal: ${__internal__}
    filters:
    - delta: 0.1
    on_value:
      lambda: |-
        if (std::isnan(x)) return;                    // <-- guard
        if (fabsf(id(current_setpoint) - x) > 0.05f) 
        {
          id(current_setpoint) = x;
          id(set_all_targets).execute(x);
        }

text_sensor:
  - platform: homeassistant
    id: generic_thermostat_mode
    entity_id: ${__ha_generic_thermostat__}
    # attribute: hvac_mode
    internal: ${__internal__}
    on_value:
      lambda: |-
        if (x == "unavailable" || x == "unknown") return; // guard
        if (id(current_mode) != x) 
        {
          id(current_mode) = x;
          id(set_all_modes).execute(x);
        }
        
  - platform: homeassistant
    id: trv_1_mode
    entity_id: ${__ha_sonoff_trv_1__}
    # attribute: hvac_mode
    internal: ${__internal__}
    on_value:
      lambda: |-
        if (x == "unavailable" || x == "unknown") return; // guard
        if (id(current_mode) != x) 
        {
          id(current_mode) = x;
          id(set_all_modes).execute(x);
        }

script:
  ############################################
  # 1) push a new target temperature everywhere
  ############################################
  - id: set_all_targets
    parameters:
      temp: float
    then:
      - lambda: |-
          ESP_LOGI("sync", "PID ➜ %.1f °C", temp);
          id(${__esphome_pid_climate__}).make_call().set_target_temperature(temp).perform();

      # ---------- TRV 1 ----------
      - homeassistant.action:
          # action: climate.set_temperature
          service: climate.set_temperature
          data:
            entity_id: ${__ha_sonoff_trv_1__}
          data_template:
            temperature: '{{ new_temp }}'
          variables:
            new_temp: |-
              return temp;

      # ---------- TRV 2 ----------
      # - homeassistant.action:
      #     # action: climate.set_temperature
      #     service: climate.set_temperature
      #     data:
      #       entity_id: ${trv2}
      #     data_template:
      #       temperature: '{{ new_temp }}'
      #     variables:
      #       new_temp: |-
      #         return temp;

      # ---------- Generic thermostat ----------
      - homeassistant.action:
          # action: climate.set_temperature
          service: climate.set_temperature
          data:
            entity_id: ${__ha_generic_thermostat__}
          data_template:
            temperature: '{{ new_temp }}'
          variables:
            new_temp: |-
              return temp;

  ############################################
  # 2) push HVAC mode everywhere (“heat” / “off”)
  ############################################
  - id: set_all_modes
    parameters:
      mode: string
    then:
      - lambda: |-
          ESP_LOGI("sync", "PID mode ➜ %s", mode.c_str());
          auto call = id(${__esphome_pid_climate__}).make_call();
          call.set_mode(mode == "off" ? climate::CLIMATE_MODE_OFF : climate::CLIMATE_MODE_HEAT);
          call.perform();

      # ---------- TRV 1 ----------
      - homeassistant.action:
          # action: climate.set_hvac_mode
          service: climate.set_hvac_mode
          data:
            entity_id: ${__ha_sonoff_trv_1__}
          data_template:
            hvac_mode: '{{ _mode }}'
          variables:
            _mode: |-
              return mode;

      # ---------- TRV 2 ----------
      # - homeassistant.action:
      #     # action: climate.set_hvac_mode
      #     service: climate.set_hvac_mode
      #     data:
      #       entity_id: ${trv2}
      #     data_template:
      #       hvac_mode: '{{ _mode }}'
      #     variables:
      #       _mode: |-
      #         return mode;

      # ---------- Generic thermostat ----------
      - homeassistant.action:
          # action: climate.set_hvac_mode
          service: climate.set_hvac_mode
          data:
            entity_id: ${__ha_generic_thermostat__}
          data_template:
            hvac_mode: '{{ _mode }}'
          variables:
            _mode: |-
              return mode;


