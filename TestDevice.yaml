esphome:
  name: testdevice
  name_add_mac_suffix: false
  friendly_name: TestDevice


logger:
  level: WARN

esp32:
  board: esp32dev
  framework:
    type: arduino

ota: 
  - platform: esphome
    password: !secret ota_password

api:
  encryption:   
    key: !secret esphome-testdevice_Key

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password


globals:
  - id: ot_scan_id
    type: int
    restore_value: no
    initial_value: '0'

opentherm:
  in_pin: GPIO21
  out_pin: GPIO22
  controller_product_type: 0
  controller_product_version: 1
  opentherm_version_controller: 4.0
  controller_configuration: 0
  controller_id: 1

  before_send:
    then:
      - lambda: |-
          // Vraag READ_DATA voor huidige scan-ID
          x.id = id(ot_scan_id);
          x.type = esphome::opentherm::MessageType::READ_DATA;
          ESP_LOGD("ot-scan", ">>> Request ID %d (READ_DATA)", id(ot_scan_id));
          id(ot_scan_id)++;
          if (id(ot_scan_id) > 127) id(ot_scan_id) = 0;

  before_process_response:
    then:
      - lambda: |-
          // Maak zelf een 16-bit raw en (optioneel) 8.8 fixed-point float
          uint16_t raw = (uint16_t(x.valueHB) << 8) | uint16_t(x.valueLB);
          float fx88 = int16_t(raw) / 256.0f;  // veel OT-waarden zijn signed 8.8
          ESP_LOGD("ot-scan",
                   "<<< Response ID %d, type=%d, HB=%u LB=%u, raw=0x%04X, fx8.8=%.2f",
                   x.id, (int) x.type, x.valueHB, x.valueLB, raw, fx88);


# Optioneel: t_set sturen zodat er vraag kan zijn (handig voor sommige IDs)
output:
  - platform: opentherm
    t_set:
      id: t_set_out
      min_value: 0
      max_value: 100

interval:
  - interval: 10s
    then:
      - lambda: |-
          id(t_set_out).set_level(0.5);  // ~50Â°C target