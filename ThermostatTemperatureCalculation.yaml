substitutions:
  device_name: CV
  min_cv_temp: "30" 
  max_cv_temp: "80"
  outside_temp_sensor: sensor.outside_temp
  heat_demand_room_1: sensor.room_1
  heat_demand_room_2: sensor.room_2
# heat_demand_room_3: sensor.room_3


sensor:
  - platform: homeassistant
    id: ${device_name}_outside_temperature_sensor
    entity_id: ${outside_temp_sensor}

# ----- Heat Demand Sensors -----
  - platform: homeassistant
    id: ${device_name}_demand_room_1
    entity_id: ${heat_demand_room_1}

  - platform: homeassistant
    id: ${device_name}_demand_room_2
    entity_id: ${heat_demand_room_2}

#   - platform: homeassistant
#     id: demand_room_3
#     entity_id: ${heat_demand_room_3}

  # Add more rooms here …

##################################
# Aggregate demand (max function)#
##################################
  - platform: template
    id: ${device_name}_max_heat_demand
    internal: true
    lambda: |-
      float max_val = 0.0f;

      if (!isnan(id(${device_name}_demand_room_1).state)) {
        max_val = id(${device_name}_demand_room_1).state;
      }

      if (!isnan(id(${device_name}_demand_room_2).state) && id(${device_name}_demand_room_2).state > max_val) {
        max_val = id(${device_name}_demand_room_2).state;
      }

      // Add more rooms here if needed
        //   if (!isnan(id(${device_name}_demand_room_3).state) && id(${device_name}_demand_room_3).state > max_val) {
        //     max_val = id(${device_name}_demand_room_3).state;
        //   }

      return max_val;
    update_interval: 1s
    unit_of_measurement: "%"
    accuracy_decimals: 1

##############################################
# Calculate target water temperature (°C)    #
##############################################
  - platform: template
    id: ${device_name}_target_water_temperature
    name: "Target Water Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    update_interval: 1s
    lambda: |-
      // Guard against missing data
      if (isnan(id(${device_name}_outside_temperature_sensor).state)) {
        return NAN;
      }

      float t = id(${device_name}_outside_temperature_sensor).state;
      float heat_demand_pct;

      // Heating demand curve based on outdoor temperature
      if (t <= 0.0f) {
        heat_demand_pct = 100.0f;
      } else if (t >= 25.0f) {
        heat_demand_pct = 0.0f;
      } else {
        heat_demand_pct = (-0.016f * t * t * t) + (0.26f * t * t) - (1.3f * t) + 100.0f;
        if (heat_demand_pct < 0.0f) heat_demand_pct = 0.0f;
        if (heat_demand_pct > 100.0f) heat_demand_pct = 100.0f;
      }
      
      // Scale by room demand (0–100%)
      heat_demand_pct *= (id(${device_name}_max_heat_demand).state / 100.0f);

      float min_temp = ${min_cv_temp};
      float max_temp = ${max_cv_temp};
      return (heat_demand_pct / 100.0f) * (max_temp - min_temp) + min_temp;