esphome:
  name: testdevice
  name_add_mac_suffix: false
  friendly_name: TestDevice

logger:
  level: WARN

esp32:
  board: esp32dev
  framework:
    type: arduino


# Enable Home Assistant API
api:
  encryption:   
    key: !secret esphome-testdevice_Key

ota: 
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password




packages:
  url: https://github.com/S1146468/ESPHome-Packages
  files:
    - path: Switches/ButtonExtraFeatures.yaml
      vars:
        __buttonId__: button_test
        __buttonFriendlyName__: "Button Test"
        __gpioId__: GPIO39
        __inverted__: "true"
        __onMinTime__: 30ms
        __onMaxTime__: 500ms
        __offMinTime__: 30ms
        __offMaxTime__: 500ms
        __holdOnMinTime__: 1s
        __holdOnMaxTime__: 3s
        __endTime__: 250ms

































# substitutions:


#   # ----------------- ESPHOME Device ------------------ #
#   devicename: testdevice
#   friendly_name: TestDevice
#   # ----------------- ESPHOME Climate ----------------- #
#   # ---------- Home Assistant Import Devices ---------- #
#   # ------------------- Miscellaneous ----------------- #

#   climate_pid_name: pid_climate
#   climate_pid_friendly_name: "Pid Climate"
#   climate_main: climate.verwarming_stijn
#   climate_trv: climate.fake_radiatorknop_stijn #climate.trvzb_kamer_stijn
#   temperature_sensor: sensor.snzb02p_kamer_stijn_temperature
#   humidity_sensor: sensor.snzb02p_kamer_stijn_humidity
#   outdoor_sensor: sensor.temperature 
#   window_sensor: binary_sensor.snzb04p_kamer_stijn_contact
#   interval_time: 1s
#   diagnostic_interval_time: 10s
    
# esphome:
#   name: ${devicename}
#   name_add_mac_suffix: false
#   friendly_name: ${friendly_name}

# logger:
#   level: WARN

# esp32:
#   board: esp32dev
#   framework:
#     type: arduino


# # Enable Home Assistant API
# api:
#   encryption:   
#     key: !secret esphome-testdevice_Key

# ota: 
#   - platform: esphome
#     password: !secret ota_password

# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password



# packages:
#   url: https://github.com/S1146468/ESPHome-Packages
#   files:
#     - path: ClimateTargetStateSync.yaml
#       vars:
#         __esphome_pid_climate__: pid_climate
#         __ha_generic_thermostat__: climate.verwarming_stijn
#         __ha_sonoff_trv_1__: climate.fake_radiatorknop_stijn
#         __internal__: "false"
#     - path: ClimatePidDebugSensors.yaml
#       vars:
#         __internal__: "false"
#         __device_name__: testdevice
#         __esphome_pid_climate_friendly_name__: Pid Climate
#         __esphome_pid_climate__: pid_climate
#         __diagnostic_interval__: 10s
#     - path: ThermostatTemperatureCalculation.yaml
#       vars: 
#         device_name: ${devicename} 
#         min_cv_temp: "30" # min allowed heating temp
#         max_cv_temp: "70" # Max allowed heating temp
#         outside_temp_sensor: ${outdoor_sensor} # sensor.temperature
#         heat_demand_room_1: sensor.climate_stijn_heat_output 
#         heat_demand_room_2: sensor.climate_stijn_heat_output
#   ref: main
#   refresh: 0s

# button:
#   - platform: restart
#     name: "Restart"
#     id: button_restart
#     entity_category: config

#   - platform: template
#     id: PID_autotune_start
#     name: "PID autotune"
#     entity_category: config
#     on_press:
#       then:
#        - script.execute: run_pid_autotune


# script:
#   - id: run_pid_autotune
#     then:
#       - climate.pid.autotune:
#           id: ${climate_pid_name}
#           noiseband: 0.25
#           positive_output: 1.0
#           negative_output: 0.0

#   - id: run_integral_reset
#     then: 
#       - climate.pid.reset_integral_term: ${climate_pid_name}
  
# globals:
#   - id: previous_setpoint
#     type: float
#     initial_value: "22.0"
#   - id: heat_output
#     type: float
#     restore_value: no
#     initial_value: "0.0"

# switch:
#   - platform: template
#     id: generic_thermostat_actuater_heat
#     name: "Generic Thermostat Actuater Heat"
#     entity_category: config
#     turn_on_action:
#       - switch.template.publish:
#           id: generic_thermostat_actuater_heat
#           state: ON
#     turn_off_action:
#       - switch.template.publish:
#           id: generic_thermostat_actuater_heat
#           state: OFF

#   - platform: template
#     id: delete_this_switch
#     name: "Delete this switch"
#     entity_category: config
#     turn_on_action:
#       - switch.template.publish:
#           id: delete_this_switch
#           state: ON
#     turn_off_action:
#       - switch.template.publish:
#           id: delete_this_switch
#           state: OFF         
  
    
# output:
#   - platform: template
#     id: heater_output
#     type: float
#     write_action:
#       lambda: |-
#         // Window control
#         if(isnan(id(window).state))    { id(heat_output) = state; return; } // Turn on heating control when window state is unavailable
#         if(id(window).state == 1.0)    { id(heat_output) = 0.0;   return; } // Turn off heating control when window is open       
#         if(id(window).state == 0.0)    { id(heat_output) = state; return; }  // Turn on heating control when window is closed
        
        

# interval:
#   - interval: ${interval_time}
#     then:
#       lambda: |-
#         auto climate = id(${climate_pid_name});  // Access the climate object
#         float current_setpoint = climate->target_temperature;
#         if (current_setpoint != id(previous_setpoint)) {
#           id(previous_setpoint) = current_setpoint;
#           id(run_integral_reset).execute();
#         }



# climate:
#   - platform: pid
#     id: ${climate_pid_name}
#     name: ${climate_pid_friendly_name}
#     sensor: temperature
#     humidity_sensor: humidity
#     default_target_temperature: 21Â°C
#     heat_output: heater_output
#     internal: true
#     visual:
#       min_temperature: 5
#       max_temperature: 35
#       temperature_step: 
#         target_temperature: 0.5
#         current_temperature: 0.1
#     control_parameters:
#       kp: 0.23873
#       ki: 0.00018
#       kd: 8.85876
#       min_integral: -10.0
#       max_integral: 10.0
#       starting_integral_term: 0.0
#       output_averaging_samples: 10
#       derivative_averaging_samples: 5
#     deadband_parameters:
#       threshold_low: -0.5
#       threshold_high: 0.5
#       kp_multiplier: 0.0
#       ki_multiplier: 0.05
#       kd_multiplier: 0.1
#       deadband_output_averaging_samples: 30



# binary_sensor:
#   - platform: homeassistant 
#     name: "Window Sensor"
#     entity_id: ${window_sensor}
#     id: window

# sensor:
#   - platform: homeassistant 
#     name: "Temperature Sensor"
#     entity_id: ${temperature_sensor}
#     id: temperature
#     filters: 
#       - heartbeat: ${interval_time}
#       - lambda: |-
#           const float filterFactor = 0.1f;
#           float keepFactor = 1.0f - filterFactor;
#           float value = id(temperature).state;

#           if (isnan(value)) return x;

#           if (isnan(x)) return keepFactor * value + 0.0;  // Default fallback value
#           else return keepFactor * value + x * filterFactor;

#   - platform: homeassistant 
#     name: "Humidity Sensor"
#     entity_id: ${humidity_sensor}
#     id: humidity
#     filters: 
#       - heartbeat: ${interval_time}
#       - lambda: |-
#           const float filterFactor = 0.1f;
#           float keepFactor = 1.0f - filterFactor;
#           float value = id(humidity).state;

#           if (isnan(value)){
#             return x;
#           }

#           if (isnan(x)) {
#             return keepFactor * value + 0.0;  // Default fallback value
#           } else {
#             return keepFactor * value + x * filterFactor;
#           }
             

#   - platform: template
#     name: "Heat output"
#     id: pid_output
#     unit_of_measurement: "%"
#     icon: "mdi:gauge"
#     state_class: measurement
#     filters: 
#       - multiply: !lambda return 100.0;
#       - clamp: 
#           max_value: 100.0
#           min_value: 0.0
#           ignore_out_of_range: false
#       - round: 0
#       - lambda: |-
#           // Visual heating state in home assistant
#           if(x < 0.0f)  id(generic_thermostat_actuater_heat).turn_off();
#           if(x == 0.0f) id(generic_thermostat_actuater_heat).turn_off();
#           if(x > 0.0f)  id(generic_thermostat_actuater_heat).turn_on();
#           return x;
#     update_interval: ${interval_time}
#     lambda: |- 
#       return heat_output->value();

#   - platform: template
#     name: "Valve Closing Position"
#     id: valve_closing_position
#     unit_of_measurement: "%"
#     icon: "mdi:valve"
#     state_class: measurement
#     filters: 
#       - multiply: !lambda return 100.0;
#       - lambda: return 100.0 - x;
#       - clamp: 
#           max_value: 100.0
#           min_value: 0.0
#           ignore_out_of_range: false
#       - round: 0
#     update_interval: ${interval_time}
#     lambda: |- 
#       return heat_output->value();

#   - platform: template
#     name: "Valve Opening Position"
#     id: valve_opening_position
#     unit_of_measurement: "%"
#     icon: "mdi:valve-open"
#     state_class: measurement
#     filters: 
#       - multiply: !lambda return 100.0;
#       - lambda: return x + 5.0;
#       - clamp: 
#           max_value: 100.0
#           min_value: 0.0
#           ignore_out_of_range: false
#       - round: 0
#     update_interval: ${interval_time}
#     lambda: |- 
#       return heat_output->value();




