substitutions:
    device:
        id: singleSensor
    config:
        sensorId: binary_sensor.occupancy
        sensorTimeOut: 60s
        debugInternal: "true"
    output:
        icon: "mdi:sofa"
        light_entity: ""



binary_sensor:
# ────────────────────────────────────────────────────────────────
# Input sensors imported from Home Assistant
# ────────────────────────────────────────────────────────────────
  - platform: homeassistant
    id: ${device.id}_occupancy
    entity_id: ${config.sensorId}
    internal: true
    filters:
      - delayed_off: ${config.sensorTimeOut}
    on_state_change: 
      then:
        - script.execute: ${device.id}_check_for_occupancy
        - binary_sensor.template.publish:
            id: ${device.id}_occupancy_debug
            state: !lambda 'return id(${device.id}_occupancy).state;'
# ────────────────────────────────────────────────────────────────



# ────────────────────────────────────────────────────────────────
# Debug sensors exposed to Home Assistant
# ────────────────────────────────────────────────────────────────
  - platform: template
    id: ${device.id}_occupancy_debug
    device_id: ${device.id}
    name: "Occupancy Debug"
    device_class: occupancy
    entity_category: diagnostic
    internal: ${config.debugInternal}
# ────────────────────────────────────────────────────────────────



# ────────────────────────────────────────────────────────────────
# Virtual occupancy sensors exposed to Home Assistant
# ────────────────────────────────────────────────────────────────
  - platform: template
    id: ${device.id}_occupancy_output
    device_id: ${device.id}
    name: "Occupancy"
    device_class: occupancy
    icon: ${output.icon}
    lambda: |-
      if(output.light_entity != "")
      {
        if(x == true)
        {
          id(api).call_homeassistant_service("light.turn_on", {{"entity_id", ${output.light_entity}}});
        }

        if(x == false)
        {
          id(api).call_homeassistant_service("light.turn_off", {{"entity_id", ${output.light_entity}}});
        }
      } 
      
# ────────────────────────────────────────────────────────────────

script:
  - id: ${device.id}_check_for_occupancy
    then: 
      - lambda: |-
          if (id(${device.id}_occupancy).state == true) {
            id(${device.id}_occupancy_output).publish_state(true);
            return;
          }

          id(${device.id}_occupancy_output).publish_state(false);

interval: 
  - id: ${device.id}_watchdog
    interval: 1min
    then: 
      - script.execute: ${device.id}_check_for_occupancy