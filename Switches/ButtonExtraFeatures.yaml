substitutions:
  __buttonId__: button
  __buttonFriendlyName__: "Button"
  __gpioId__: GPIO00
  __inverted__: "true"
  __onMinTime__: 30ms
  __onMaxTime__: 500ms
  __offMinTime__: 30ms
  __offMaxTime__: 500ms
  __holdOnMinTime__: 1s
  __holdOnMaxTime__: 3s
  __endTime__: 250ms


globals:
  - id: ${__buttonId__}_single_state_global
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: ${__buttonId__}_double_state_global
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: ${__buttonId__}_triple_state_global
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: ${__buttonId__}_hold_state_global
    type: bool
    restore_value: no
    initial_value: 'false'

# The GPIO button
binary_sensor:
  - platform: gpio
    pin: 
      number: ${__gpioId__}  # Change this to your actual pin
      mode:
        input: true
      inverted: ${__inverted__}
    filters:
      - delayed_off: 10ms
    name: "${__buttonFriendlyName__} GPIO"
    id: ${__buttonId__}_gpio


    on_multi_click:
    - timing: # Single short click
        -  ON for ${__onMinTime__} to ${__onMaxTime__}
        -  OFF for at least ${__endTime__}
      then:
        - logger.log: "Single short click"
        - globals.set:
              id: ${__buttonId__}_single_state_global
              value: !lambda 'return !id(${__buttonId__}_single_state_global);'

    - timing: # Double short click
        -  ON for ${__onMinTime__} to ${__onMaxTime__}
        -  OFF for ${__offMinTime__} to ${__offMaxTime__}
        -  ON for ${__onMinTime__} to ${__onMaxTime__}
        -  OFF for at least ${__endTime__}
      then:
        - logger.log: "Double short click"
        - globals.set:
              id: ${__buttonId__}_double_state_global
              value: !lambda 'return !id(${__buttonId__}_double_state_global);'

    - timing: # Triple short click
        -  ON for ${__onMinTime__} to ${__onMaxTime__}
        -  OFF for ${__offMinTime__} to ${__offMaxTime__}
        -  ON for ${__onMinTime__} to ${__onMaxTime__}
        -  OFF for ${__offMinTime__} to ${__offMaxTime__}
        -  ON for ${__onMinTime__} to ${__onMaxTime__}
        -  OFF for at least ${__endTime__}
      then:
        - logger.log: "Triple short click"
        - globals.set:
              id: ${__buttonId__}_triple_state_global
              value: !lambda 'return !id(${__buttonId__}_triple_state_global);'

    - timing: # Hold
        -  ON for ${__holdOnMinTime__} to ${__holdOnMaxTime__}
        -  OFF for at least ${__endTime__}
      then:
        - logger.log: "Hold"
        - globals.set:
              id: ${__buttonId__}_hold_state_global
              value: !lambda 'return !id(${__buttonId__}_hold_state_global);'

    # Expose global var as binary sensor
  - platform: template
    name: "${__buttonFriendlyName__} Single"
    id: ${__buttonId__}_single_template_sensor
    lambda: |-
      return id(${__buttonId__}_single_state_global);

    # Expose global var as binary sensor
  - platform: template
    name: "${__buttonFriendlyName__} Double"
    id: ${__buttonId__}_double_template_sensor
    lambda: |-
      return id(${__buttonId__}_double_state_global);

    # Expose global var as binary sensor
  - platform: template
    name: "${__buttonFriendlyName__} Triple"
    id: ${__buttonId__}_triple_template_sensor
    lambda: |-
      return id(${__buttonId__}_triple_state_global);

    # Expose global var as binary sensor
  - platform: template
    name: "${__buttonFriendlyName__} Hold"
    id: ${__buttonId__}_hold_template_sensor
    lambda: |-
      return id(${__buttonId__}_hold_state_global);
